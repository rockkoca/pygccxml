language:
  - python

matrix:
  include:
    - os: linux
      sudo: false
      python: 2.6
      env: XML_GENERATOR="gccxml"
      addons:
        apt:
          packages:
          - gccxml
    - os: linux
      sudo: false
      python: 2.7
      env: XML_GENERATOR="gccxml"
      addons:
        apt:
          packages:
          - gccxml
    - os: linux
      sudo: false
      python: 3.2
      env: XML_GENERATOR="gccxml"
      addons:
        apt:
          packages:
          - gccxml
    - os: linux
      sudo: false
      python: 3.3
      env: XML_GENERATOR="gccxml"
      addons:
        apt:
          packages:
          - gccxml
    - os: linux
      sudo: false
      python: 3.4
      env: XML_GENERATOR="gccxml"
      addons:
        apt:
          packages:
          - gccxml
    - os: linux
      sudo: false
      python: 3.5
      env: XML_GENERATOR="gccxml"
      addons:
        apt:
          packages:
          - gccxml
    - os: linux
      sudo: false
      python: 2.7
      env: XML_GENERATOR="castxml"
    - os: linux
      sudo: false
      python: 3.5
      env: XML_GENERATOR="castxml"
    - os: linux
      sudo: false
      python: 3.5
      env:
       - XML_GENERATOR="castxml"
       - COMPILER=g++-5
      addons:
        apt:
          sources:
            - ubuntu-toolchain-r-test
          packages:
          # gcc 5.2.1
            - g++-5
    - os: linux
      dist: trusty
      sudo: false
      python: 3.5
      env: XML_GENERATOR="castxml"
    - os: linux
      dist: trusty
      sudo: false
      python: 3.5
      env:
         # gcc 4.8.2 with c++03
         - XML_GENERATOR="castxml"
         - CPPSTD="-std=c++03"
    - os: linux
      dist: trusty
      sudo: false
      python: 3.5
      env:
         # gcc 4.8.2 with c++11
         - XML_GENERATOR="castxml"
         - CPPSTD="-std=c++11"
    - os: linux
      dist: trusty
      sudo: false
      python: 3.5
      env:
       - XML_GENERATOR="castxml"
       - COMPILER=g++-5
      addons:
        apt:
          sources:
            - ubuntu-toolchain-r-test
          packages:
            # gcc 5.3.0
            - g++-5
    - os: linux
      dist: trusty
      sudo: false
      python: 3.5
      env:
       - XML_GENERATOR="castxml"
       - COMPILER=g++-5
       - CPPSTD="-std=c++14"
      addons:
        apt:
          sources:
            - ubuntu-toolchain-r-test
          packages:
            # gcc 5.3.0
            - g++-5
    - os: osx
      osx_image: xcode7.3
      language: generic
      env:
        - XML_GENERATOR="castxml"
        - TRAVIS_PYTHON_VERSION="2"
    - os: osx
      osx_image: xcode7.3
      language: generic
      env:
        - XML_GENERATOR="castxml"
        - TRAVIS_PYTHON_VERSION="3"


before_install:
 # OS X
  - if [[ "$TRAVIS_OS_NAME" == "osx" ]]; then travis_retry brew update; fi
  - if [[ "$TRAVIS_OS_NAME" == "osx" ]] && [[ $TRAVIS_PYTHON_VERSION == 3 ]]; then brew install python3; fi
  - if [[ "$TRAVIS_OS_NAME" == "osx" ]] && [[ $TRAVIS_PYTHON_VERSION == 3 ]]; then sudo ln -sf /usr/local/bin/pip3 /usr/local/bin/pip; fi
  - if [[ "$TRAVIS_OS_NAME" == "osx" ]] && [[ $TRAVIS_PYTHON_VERSION == 3 ]]; then sudo ln -sf /usr/local/bin/python3 /usr/local/bin/python; fi

  # Download castxml binaries
  # To update the URLs, get the full URLS from ITK, and the run wget with --verbose on the URL.
  # Look at the redirection and extract the direct URL for usage with Travis.
  - if [ "$TRAVIS_OS_NAME" = "osx" ]; then
      if [ ! -e ${HOME}/castxml ]; then
        wget -q -O - https://midas3.kitware.com/midas/download/bitstream/461589/castxml-macosx.tar.gz | tar zxf - -C ${HOME};
      fi;
    fi

  - if [[ "$TRAVIS_OS_NAME" == "linux" ]] && [[ $XML_GENERATOR == "castxml" ]]; then
      if [ ! -e ${HOME}/castxml ]; then
        wget -q -O - https://midas3.kitware.com/midas/download/bitstream/461590/castxml-linux.tar.gz | tar zxf - -C ${HOME};
      fi;
    fi

  # Add the castxml binary to the path
  - if [[ $XML_GENERATOR == "castxml" ]]; then
      export PATH=$PATH:~/castxml/bin/;
    fi

  # Patch the c++ version to test on the fly
  - if [[ $CPPSTD == "-std=c++03" ]]; then
      cd unittests && sed -i s%compiler=None,%compiler=None,\\n\ \ \ \ \ \ \ \ cflags=\"-std=c++03\",%g autoconfig.py && cd ..;
    fi

  # Patch the c++ version to test on the fly
  - if [[ $CPPSTD == "-std=c++11" ]]; then
      cd unittests && sed -i s%compiler=None,%compiler=None,\\n\ \ \ \ \ \ \ \ cflags=\"-std=c++11\",%g autoconfig.py && cd ..;
    fi

  # Patch the c++ version to test on the fly
  - if [[ $CPPSTD == "-std=c++14" ]]; then
      cd unittests && sed -i s%compiler=None,%compiler=None,\\n\ \ \ \ \ \ \ \ cflags=\"-std=c++14\",%g autoconfig.py && cd ..;
    fi

  # Patch the compiler path on the fly for gcc5 testing
  - if [[ "$COMPILER" == "g++-5" ]] && [[ $XML_GENERATOR == "castxml" ]]; then
      cd unittests && sed -i s%compiler=None%compiler=\"/usr/bin/g++-5\"%g autoconfig.py && cd ..;
    fi

  # Install pep8, needed by the unit tests
  - pip install pep8

  # Install coverage tools (On 3.2 the new coverage is broken, use an old one)
  # https://github.com/menegazzo/travispy/issues/20
  - if [ $TRAVIS_PYTHON_VERSION == 3.2 ]; then
      pip install 'coverage<4.0';
    else
      pip install coverage;
    fi
  - pip install coveralls

install:
  - if [[ $TRAVIS_PYTHON_VERSION == 2.6 ]]; then pip install unittest2; fi

script:
  - echo $TRAVIS_OS_NAME

  # Modify sitecustomize.py file for coverage. Allows to cover files run in a subprocess.
  - if [[ "$TRAVIS_OS_NAME" == "linux" ]]; then touch "/home/travis/virtualenv/python${TRAVIS_PYTHON_VERSION}/lib/python${TRAVIS_PYTHON_VERSION}/sitecustomize.py"; fi
  - if [[ "$TRAVIS_OS_NAME" == "osx" ]] && [[ $TRAVIS_PYTHON_VERSION == 2 ]]; then touch "/usr/local/lib/python2.7/site-packages/sitecustomize.py"; fi
  - if [[ "$TRAVIS_OS_NAME" == "osx" ]] && [[ $TRAVIS_PYTHON_VERSION == 3 ]]; then touch "/usr/local/lib/python3.5/site-packages/sitecustomize.py"; fi

  - if [[ "$TRAVIS_OS_NAME" == "linux" ]];
    then printf "import coverage\ncoverage.process_startup()\n" > "/home/travis/virtualenv/python${TRAVIS_PYTHON_VERSION}/lib/python${TRAVIS_PYTHON_VERSION}/sitecustomize.py"; fi
  - if [[ "$TRAVIS_OS_NAME" == "osx" ]] && [[ $TRAVIS_PYTHON_VERSION == 2 ]];
    then printf "import coverage\ncoverage.process_startup()\n" > "/usr/local/lib/python2.7/site-packages/sitecustomize.py"; fi
  - if [[ "$TRAVIS_OS_NAME" == "osx" ]] && [[ $TRAVIS_PYTHON_VERSION == 3 ]];
    then printf "import coverage\ncoverage.process_startup()\n" > "/usr/local/lib/python3.5/site-packages/sitecustomize.py"; fi

  # Install pygccxml
  - python setup.py install

  # Run the tests with coverage
  - coverage run unittests/test_all.py
  # Combine multiple .coverage files (we have multiple files because some scripts were run in a subprocess).
  - coverage combine

after_success:
  # Send coverage result to https://coveralls.io/r/gccxml/pygccxml
  - coveralls
